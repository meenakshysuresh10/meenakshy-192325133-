28. Write a program to implement Meet in the Middle Technique. Given a large array of integers and an exact sum E, determine if there is any subset that sums exactly to E. Utilize the Meet in the Middle technique to handle the potentially large size of the array. Return true if there is a subset that sums exactly to E, otherwise return false.
a) E = {1, 3, 9, 2, 7, 12} exact Sum = 15
b) E = {3, 34, 4, 12, 5, 2} exact Sum = 15

from itertools import combinations
def generate_subset_sums(arr):
    subset_sums=set()
    for r in range(len(arr)+1):
        for subset in combinations(arr,r):
            subset_sums.add(sum(subset))
    return subset_sums
def meet_in_the_middle(arr, E):
    mid = len(arr)//2
    first_half=arr[:mid]
    second_half=arr[mid:]    
    sums_first_half = generate_subset_sums(first_half)
    sums_second_half = generate_subset_sums(second_half)
    for s in sums_first_half:
        if (E-s) in sums_second_half:
            return True
    return False
array_a=[1,3,9,2,7,12]
exact_sum_a=15
print(meet_in_the_middle(array_a, exact_sum_a))

Output: True